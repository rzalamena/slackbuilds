#!/bin/sh
#
# Copyright (C) 2021 Rafael F. Zalamena
# All rights reserved.
# 
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
# 
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

cd $(dirname $0) ; CWD=$(pwd)

PKGNAM=nvidia-xorg
VERSION=${VERSION:-470.57.02}
BUILD=${BUILD:-1}
PKGTYPE=${PKGTYPE:-txz}

if [ -z "$ARCH" ]; then
  case "$(uname -m)" in
    i?86) export ARCH=i586 ;;
    arm*) export ARCH=arm ;;
    *) export ARCH=$(uname -m) ;;
  esac
fi

if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mcpu=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "s390" ]; then
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
elif [ "$ARCH" = "armv7hl" ]; then
  SLKCFLAGS="-O3 -march=armv7-a -mfpu=vfpv3-d16"
  LIBDIRSUFFIX=""
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

NUMJOBS=${NUMJOBS:-" -j$(nproc) "}

TMP=${TMP:-/tmp/slackbuild}
PKG=${PKG:-$TMP/package-$PKGNAM}
rm -rf $PKG
mkdir -p $TMP $PKG

cd $TMP
rm -rf nvidia-modprobe-$VERSION nvidia-settings-$VERSION \
  NVIDIA-Linux-x86_64-$VERSION

sh $CWD/NVIDIA-Linux-x86_64-$VERSION.run --extract-only
cd NVIDIA-Linux-x86_64-$VERSION

# Install all precompiled binaries first.
#
# See nvidia documentation Chapter 5 'Listing of Installed Components'.
XORGDIR=$PKG/usr/lib$LIBDIRSUFFIX/xorg
install -o root -g root -m 0644 -v -D nvidia_drv.so \
  $XORGDIR/modules/drivers/nvidia_drv.so
install -o root -g root -m 0644 -v -D libglxserver_nvidia.so.$VERSION \
  $XORGDIR/extensions/libglxserver_nvidia.so.$VERSION

mkdir -p $PKG/usr/lib$LIBDIRSUFFIX
install -o root -g root -m 0644 -v libGL.so* libEGL.so* libGLESv* \
  libnvidia-egl-wayland.so* libOpenGL.so* libGLX.so* libGLdispatch.so* \
  libGLX_nvidia.so.$VERSION libEGL_nvidia.so.$VERSION \
  libnvidia-cfg.so.$VERSION libnvidia-compiler.so.$VERSION \
  libnvidia-eglcore.so.$VERSION libnvidia-glcore.so.$VERSION \
  libnvidia-glsi.so.$VERSION libnvidia-glvkspirv.so.$VERSION \
  libnvidia-rtcore.so.$VERSION libnvidia-cbl.so.$VERSION \
  libnvidia-allocator.so.$VERSION libvdpau_nvidia.so.$VERSION \
  libcuda.so.$VERSION libnvidia-ptxjitcompiler.so.$VERSION \
  libnvidia-nvvm.so* libnvidia-opencl.so.$VERSION \
  libOpenGL.so.* libnvidia-tls.so.$VERSION libnvidia-ml.so.$VERSION \
  libnvcuvid.so.$VERSION libnvidia-encode.so.$VERSION \
  libnvidia-ifr.so.$VERSION libnvidia-fbc.so.$VERSION \
  libnvoptix.so.$VERSION libnvidia-opticalflow.so.$VERSION \
  libnvidia-ngx.so.$VERSION \
  $PKG/usr/lib$LIBDIRSUFFIX/
# libOpenCL.so.1.0.0 omitted on purpose: it exists on package ocl-icd.

if [ "$ARCH" = "x86_64" ]; then
  cd 32
  mkdir -p $PKG/usr/lib
  install -o root -g root -m 0644 -v \
    libcuda.so.$VERSION libEGL_nvidia.so.$VERSION libEGL.so* \
    libGLdispatch.so* libGLESv1_CM_nvidia.so.$VERSION libGLESv1_CM.so* \
    libGLESv2_nvidia.so.$VERSION libGLESv2.so* libGL.so* \
    libGLX_nvidia.so.$VERSION libGLX.so* libnvcuvid.so.$VERSION \
    libnvidia-allocator.so.$VERSION libnvidia-compiler.so.$VERSION \
    libnvidia-eglcore.so.$VERSION libnvidia-encode.so.$VERSION \
    libnvidia-fbc.so.$VERSION libnvidia-glcore.so.$VERSION \
    libnvidia-glsi.so.$VERSION libnvidia-glvkspirv.so.$VERSION \
    libnvidia-ifr.so.$VERSION libnvidia-ml.so.$VERSION \
    libnvidia-opencl.so.$VERSION libnvidia-opticalflow.so.$VERSION \
    libnvidia-ptxjitcompiler.so.$VERSION libnvidia-tls.so.$VERSION \
    libOpenCL.so* libOpenGL.so* libvdpau_nvidia.so.$VERSION \
    $PKG/usr/lib
  cd ..
fi

mkdir -p $PKG/opt/bin
install -o root -g root -m 0755 -v -D \
  nvidia-cuda-mps-control nvidia-cuda-mps-server nvidia-debugdump \
  nvidia-ngx-updater nvidia-smi \
  $PKG/opt/bin/

mkdir -p $PKG/usr/man/man1
install -o root -g root -m 0644 -v -D \
  nvidia-cuda-mps-control.1.gz nvidia-smi.1.gz \
  $PKG/usr/man/man1/

install -o root -g root -m 0644 -v -D 10_nvidia_wayland.json \
  $PKG/usr/share/egl/egl_external_platform.d/10_nvidia_wayland.json
install -o root -g root -m 0644 -v -D nvidia_icd.json \
  $PKG/etc/vulkan/icd.d/nvidia_icd.json
install -o root -g root -m 0644 -v -D nvidia_layers.json \
  $PKG/etc/vulkan/implicit_layer.d/nvidia_layers.json
install -o root -g root -m 0644 -v -D nvidia.icd \
  $PKG/etc/OpenCL/vendors/nvidia.icd
install -o root -g root -m 0644 -v -D nvidia-drm-outputclass.conf \
  $PKG/usr/share/X11/xorg.conf.d/99-nvidia-drm-outputclass.conf.new
install -o root -g root -m 0644 -v -D nvidia-settings.desktop \
  $PKG/usr/share/applications/nvidia-settings.desktop
install -o root -g root -m 0644 -v -D nvidia-settings.png \
  $PKG/usr/share/pixmaps/nvidia-settings.png

mkdir -p $PKG/usr/share/nvidia
install -o root -g root -m 0644 -v -D \
  nvidia-application-profiles-$VERSION-rc \
  nvidia-application-profiles-$VERSION-key-documentation \
  $PKG/usr/share/nvidia/

mkdir -p $PKG/usr/lib$LIBDIRSUFFIX/nvidia/wine
install -o root -g root -m 0644 -v -D \
  _nvngx.dll nvngx.dll $PKG/usr/lib$LIBDIRSUFFIX/nvidia/wine/

ln -s libglxserver_nvidia.so.$VERSION \
  $PKG/usr/lib$LIBDIRSUFFIX/xorg/modules/extensions/libglxserver_nvidia.so
ln -s libGL.so.1.0.0 \
  $PKG/usr/lib$LIBDIRSUFFIX/libGL.so.1
ln -s libGL.so.1.0.0 \
  $PKG/usr/lib$LIBDIRSUFFIX/libGL.so
ln -s libcuda.so.$VERSION \
  $PKG/usr/lib$LIBDIRSUFFIX/libcuda.so

tar -xvjf $CWD/nvidia-modprobe-$VERSION.tar.bz2
cd nvidia-modprobe-$VERSION
env CFLAGS="$SLKCFLAGS" make $NUMJOBS HOST_CC=$ARCH-slackware-linux-cc \
  OUTPUTDIR=out PREFIX=/usr || exit 1
make $NUMJOBS DESTDIR=$PKG LIBDIR=$PKG/usr/lib$LIBDIRSUFFIX \
  MANDIR=$PKG/usr/man/man1 OUTPUTDIR=out PREFIX=/usr install || exit 1
chmod -v 4710 $PKG/usr/bin/nvidia-modprobe || exit 1
cd ..

tar -xvjf $CWD/nvidia-settings-$VERSION.tar.bz2
cd nvidia-settings-$VERSION
CFLAGS="$SLKCFLAGS" make $NUMJOBS HOST_CC=$ARCH-slackware-linux-cc \
  OUTPUTDIR=out PREFIX=/usr || exit 1
make $NUMJOBS DESTDIR=$PKG LIBDIR=$PKG/usr/lib$LIBDIRSUFFIX \
  MANDIR=$PKG/usr/man/man1 OUTPUTDIR=out PREFIX=/usr install || exit 1
cd ..

mkdir -p $PKG/install
cat $CWD/doinst.sh > $PKG/install/doinst.sh
cat $CWD/slack-desc > $PKG/install/slack-desc

cd $PKG
/sbin/makepkg -l y -c n $TMP/$PKGNAM-$VERSION-$ARCH-$BUILD.$PKGTYPE
