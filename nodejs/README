As an asynchronous event-driven JavaScript runtime, Node.js is designed
to build scalable network applications. In the following "hello world"
example, many connections can be handled concurrently. Upon each
connection, the callback is fired, but if there is no work to be done,
Node.js will sleep.

This is in contrast to today's more common concurrency model, in which
OS threads are employed. Thread-based networking is relatively
inefficient and very difficult to use. Furthermore, users of Node.js are
free from worries of dead-locking the process, since there are no locks.
Almost no function in Node.js directly performs I/O, so the process
never blocks except when the I/O is performed using synchronous methods
of Node.js standard library. Because nothing blocks, scalable systems
are very reasonable to develop in Node.js.
