--- a/media/gpu/vaapi/vaapi_video_decode_accelerator.cc	2022-02-28 21:05:53.000000000 -0300
+++ b/media/gpu/vaapi/vaapi_video_decode_accelerator.cc	2022-03-11 17:34:47.708625615 -0300
@@ -709,7 +709,7 @@
   // implementation we get from |vaapi_picture_factory_| requires the video
   // processing pipeline for downloading the decoded frame from the internal
   // surface, we need to create a |vpp_vaapi_wrapper_|.
-  if (requires_vpp && buffer_allocation_mode_ != BufferAllocationMode::kNone) {
+  if (requires_vpp && buffer_allocation_mode_ != BufferAllocationMode::kWrapVdpau) {
     if (!vpp_vaapi_wrapper_) {
       vpp_vaapi_wrapper_ = VaapiWrapper::Create(
           VaapiWrapper::kVideoProcess, VAProfileNone,
@@ -1210,6 +1210,11 @@
 
 VaapiVideoDecodeAccelerator::BufferAllocationMode
 VaapiVideoDecodeAccelerator::DecideBufferAllocationMode() {
+  // NVIDIA blobs use VDPAU
+  if (VaapiWrapper::GetImplementationType() == VAImplementation::kNVIDIAVDPAU) {
+    LOG(INFO) << "VA-API driver on VDPAU backend";
+    return BufferAllocationMode::kWrapVdpau;
+  }
 #if BUILDFLAG(USE_VAAPI_X11)
   // The IMPORT mode is used for Android on Chrome OS, so this doesn't apply
   // here.
--- a/media/gpu/vaapi/vaapi_video_decode_accelerator.h	2022-02-28 21:05:53.000000000 -0300
+++ b/media/gpu/vaapi/vaapi_video_decode_accelerator.h	2022-03-11 17:34:47.721958986 -0300
@@ -215,6 +215,7 @@
     // Using |client_|s provided PictureBuffers and as many internally
     // allocated.
     kNormal,
+    kWrapVdpau,
   };
 
   // Decides the concrete buffer allocation mode, depending on the hardware
--- a/media/gpu/vaapi/vaapi_wrapper.cc	2022-02-28 21:05:53.000000000 -0300
+++ b/media/gpu/vaapi/vaapi_wrapper.cc	2022-03-11 17:34:47.738625700 -0300
@@ -245,6 +245,9 @@
   } else if (base::StartsWith(va_vendor_string, "Intel iHD driver",
                               base::CompareCase::SENSITIVE)) {
     return media::VAImplementation::kIntelIHD;
+  } else if (base::StartsWith(va_vendor_string, "Splitted-Desktop Systems VDPAU",
+                              base::CompareCase::SENSITIVE)) {
+    return media::VAImplementation::kNVIDIAVDPAU;
   }
   return media::VAImplementation::kOther;
 }
--- a/media/gpu/vaapi/vaapi_wrapper.h	2022-02-28 21:05:53.000000000 -0300
+++ b/media/gpu/vaapi/vaapi_wrapper.h	2022-03-11 17:34:47.745292386 -0300
@@ -92,6 +92,7 @@
   kIntelIHD,
   kOther,
   kInvalid,
+  kNVIDIAVDPAU,
 };
 
 // This class handles VA-API calls and ensures proper locking of VA-API calls
